{{- if .Values.charon.enr.existingSecret.name }}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ template "dv-pod.fullname" . }}-test-existing-enr-v2"
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dv-pod.labels" . | nindent 4 }}
    app.kubernetes.io/component: test-existing-enr
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
    "helm.sh/hook-weight": "1" # Runs after default/provided ENR tests if they were to run
    "sidecar.istio.io/inject": "false"
    {{- if .Values.global }}
      {{- if .Values.global.annotations }}
    {{- toYaml .Values.global.annotations | nindent 4 }}
      {{- end }}
    {{- end }}
    {{- if .Values.annotations}}
    {{- toYaml .Values.annotations | nindent 4 }}
    {{- end }}
spec:
  serviceAccountName: {{ template "dv-pod.serviceAccountNameTest" . }}
  restartPolicy: Never
  containers:
    - name: test-enr-job-not-run
      image: bitnami/kubectl:1.33.3
      command:
        - /bin/sh
        - -ec
        - |
          echo "INFO: Checking that ENR generation job was NOT created (using existing secret scenario)..."
          JOB_NAME="{{ template "dv-pod.fullname" . }}-enr-job"
          if kubectl get job $JOB_NAME -n {{ .Release.Namespace }} >/dev/null 2>&1; then
            echo "ERROR: ENR generation job $JOB_NAME found, but it should not exist when using an existing secret."
            exit 1
          else
            echo "INFO: ENR generation job $JOB_NAME correctly not found."
          fi

    - name: test-charon-uses-existing-secret
      image: bitnami/kubectl:1.33.3
      command:
        - /bin/sh
        - -ec
        - |
          echo "INFO: Verifying Charon pod uses the existing ENR secret {{ .Values.charon.enr.existingSecret.name }}..."
          STATEFULSET_NAME="{{ template "dv-pod.fullname" . }}"
          POD_NAME=${STATEFULSET_NAME}-0 # Assuming pod-0
          NAMESPACE={{ .Release.Namespace }}
          EXISTING_SECRET_NAME="{{ .Values.charon.enr.existingSecret.name }}"
          
          echo "INFO: Waiting for pod $POD_NAME to be ready..."
          if ! kubectl wait --for=condition=ready pod/$POD_NAME -n $NAMESPACE --timeout=120s; then
            echo "ERROR: Pod $POD_NAME did not become ready in time."
            kubectl logs $POD_NAME -n $NAMESPACE --tail=50
            exit 1
          fi
          echo "INFO: Pod $POD_NAME is ready."

          PRIVATE_KEY_DATA_KEY="{{ .Values.charon.enr.existingSecret.privateKeyDataKey | default "private-key" }}"
          PUBLIC_ENR_DATA_KEY="{{ .Values.charon.enr.existingSecret.publicKeyDataKey | default "public-enr" }}"

          echo "INFO: Fetching expected private key (base64) from secret $EXISTING_SECRET_NAME using data key '$PRIVATE_KEY_DATA_KEY'..."
          EXPECTED_PK_B64=$(kubectl get secret $EXISTING_SECRET_NAME -n $NAMESPACE -o jsonpath="{.data.${PRIVATE_KEY_DATA_KEY}}")
          if [ -z "$EXPECTED_PK_B64" ]; then
            echo "ERROR: Could not retrieve private key from secret $EXISTING_SECRET_NAME with data key '$PRIVATE_KEY_DATA_KEY'."
            exit 1
          fi
          # echo "Expected private key (base64 from secret): $EXPECTED_PK_B64"

          echo "INFO: Fetching expected public ENR (base64) from secret $EXISTING_SECRET_NAME using data key '$PUBLIC_ENR_DATA_KEY'..."
          EXPECTED_ENR_B64=$(kubectl get secret $EXISTING_SECRET_NAME -n $NAMESPACE -o jsonpath="{.data.${PUBLIC_ENR_DATA_KEY}}")
          if [ -z "$EXPECTED_ENR_B64" ]; then
            echo "ERROR: Could not retrieve public ENR from secret $EXISTING_SECRET_NAME with data key '$PUBLIC_ENR_DATA_KEY'."
            exit 1
          fi
          # echo "Expected public ENR (base64 from secret): $EXPECTED_ENR_B64"

          echo "INFO: Getting actual private key (base64) from file /var/lib/charon/charon-enr-private-key in pod $POD_NAME..."
          ACTUAL_PK_B64=$(kubectl exec $POD_NAME -n $NAMESPACE -- cat /var/lib/charon/charon-enr-private-key | base64 -w0)
          if [ -z "$ACTUAL_PK_B64" ]; then
            echo "ERROR: Could not retrieve private key from file in pod $POD_NAME."
            exit 1
          fi

          echo "INFO: Getting actual public ENR (base64) from file /var/lib/charon/charon-enr-public-key in pod $POD_NAME..."
          ACTUAL_ENR_B64=$(kubectl exec $POD_NAME -n $NAMESPACE -- cat /var/lib/charon/charon-enr-public-key | base64 -w0)
          if [ -z "$ACTUAL_ENR_B64" ]; then
            echo "ERROR: Could not retrieve public ENR from file in pod $POD_NAME."
            exit 1
          fi

          if [ "$ACTUAL_PK_B64" != "$EXPECTED_PK_B64" ]; then
            echo "ERROR: Private key in pod $POD_NAME does not match secret $EXISTING_SECRET_NAME."
            # echo "Expected (b64): $EXPECTED_PK_B64 -- Actual (b64): $ACTUAL_PK_B64"
            exit 1
          fi
          echo "INFO: Private key in pod $POD_NAME matches secret $EXISTING_SECRET_NAME."

          if [ "$ACTUAL_ENR_B64" != "$EXPECTED_ENR_B64" ]; then
            echo "ERROR: Public ENR in pod $POD_NAME does not match secret $EXISTING_SECRET_NAME."
            # echo "Expected (b64): $EXPECTED_ENR_B64 -- Actual (b64): $ACTUAL_ENR_B64"
            exit 1
          fi
          echo "INFO: Public ENR in pod $POD_NAME matches secret $EXISTING_SECRET_NAME."

          echo "INFO: Charon pod $POD_NAME successfully using existing ENR secret $EXISTING_SECRET_NAME."
{{- end }}
