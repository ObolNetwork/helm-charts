# Default values for helios.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# Helios specific configuration
helios:
  # Network to sync to. Valid options: mainnet, sepolia, holesky
  network: "mainnet"
  # RPC endpoint for Ethereum execution layer (must support eth_getProof)
  executionRpc: "https://ethereum-rpc.publicnode.com"
  # Custom consensus layer RPC endpoint (defaults to https://www.lightclientdata.org if not provided)
  consensusRpc: "https://www.lightclientdata.org"
  # Custom weak subjectivity checkpoint (optional)
  checkpoint: ""
  # RPC port for the local RPC server
  rpcPort: 8545
  # IP to bind the RPC server to
  rpcBindIp: "127.0.0.1"
  # Directory for storing cached checkpoints
  dataDir: "/data"
  # Whether to enable strict checkpoint age checking
  strictCheckpointAge: false
  # URL for checkpoint fallback
  fallback: ""
  # Whether to use external fallbacks for checkpoint data
  loadExternalFallback: false
  # Configuration file - will be created as a ConfigMap
  config:
    enabled: false
    # Example content (will be stored in a ConfigMap):
    # content: |
    #   [mainnet]
    #   consensus_rpc = "https://www.lightclientdata.org"
    #   execution_rpc = "https://eth-mainnet.provider.com/v2/YOUR-API-KEY"
    #   checkpoint = "0x85e6151a246e8fdba36db27a0c7678a575346272fe978c9281e13a8b26cdfa68"

image:
  repository: silversurfer972/helios
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8545

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Persistence for Helios to store checkpoint data
persistence:
  enabled: true
  # Use volumeClaimTemplates instead of a separate PVC (for StatefulSet)
  useVolumeClaimTemplates: true
  size: 1Gi
  # storageClass: ""
  # existingClaim: ""
  mountPath: /data
