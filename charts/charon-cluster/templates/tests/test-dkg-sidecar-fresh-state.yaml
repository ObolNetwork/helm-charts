{{- if .Values.tests.dkgSidecar.enabled }}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-dkg-fresh-test"
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded # Delete only on success
    "helm.sh/hook-weight": "0" # Run before other tests if needed
  labels:
    app.kubernetes.io/name: {{ template "charon.name" . }}
    helm.sh/chart: {{ template "charon.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: test
    test-scenario: dkg-sidecar-fresh
spec:
  hostNetwork: {{ .Values.tests.dkgSidecar.hostNetwork }}
  {{- if .Values.tests.dkgSidecar.serviceAccount.create }}
  serviceAccountName: {{ template "charon.serviceAccountNameTest" . }}
  {{- end }}
  restartPolicy: Never
  initContainers:
    # First, prepare the ENR from the secret
    - name: prepare-enr
      image: busybox
      command: 
        - sh
        - -c
        - |
          echo "Extracting ENR from secret..."
          echo "$PUBLIC_ENR" > /enr-from-job/enr.txt
          echo "ENR written to file: $(cat /enr-from-job/enr.txt)"
      env:
        - name: PUBLIC_ENR
          valueFrom:
            secretKeyRef:
              name: {{ template "charon.enrSecretName" . }}
              key: public-enr
      volumeMounts:
        - name: enr-from-job
          mountPath: /enr-from-job
    # Then run the DKG sidecar test
    - name: dkg-sidecar-fresh-test
      image: "{{ .Values.charon.dkgSidecar.image.repository }}:{{ .Values.charon.dkgSidecar.image.tag | default .Chart.AppVersion }}"
      imagePullPolicy: {{ .Values.charon.dkgSidecar.image.pullPolicy }}
      command:
        - "node"
        - "/app/dkg-sidecar.js"
        - "{{ .Values.tests.dkgSidecar.operatorAddress }}"
        - "/enr-from-job/enr.txt"
      env:
        - name: API_ENDPOINT
          value: "http://{{ .Release.Name }}-dkg-mock-api-service:{{ .Values.tests.dkgSidecar.mockApi.port }}"
        - name: INITIAL_RETRY_INTERVAL_SECONDS
          value: "2"  # Faster for tests
        - name: MAX_RETRY_INTERVAL_SECONDS
          value: "10" # Lower max for tests
        - name: BACKOFF_FACTOR
          value: "2"
        - name: OUTPUT_DEFINITION_FILE
          value: "/charon-data/cluster-definition.json"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      volumeMounts:
        - name: charon-data
          mountPath: /charon-data
        - name: enr-from-job
          mountPath: /enr-from-job
  containers:
    - name: charon-dummy-success-check
      image: busybox
      command: ['sh', '-c', 'echo DKG sidecar init container completed (unexpected for infinite FRESH poll); exit 1']

  volumes:
    - name: charon-data
      emptyDir: {}
    - name: enr-from-job
      emptyDir: {}
{{- end }}
