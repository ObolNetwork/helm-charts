{{- if and .Values.charon.enr.generate.enabled (not .Values.charon.enr.privateKey) (not .Values.charon.enr.existingSecret.name) }}
apiVersion: v1
kind: Pod
metadata:
  name: {{ template "charon.fullname" . }}-test-default-enr-v2
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    {{- include "charon.labels" . | nindent 4 }}
    app.kubernetes.io/component: test
spec:
  serviceAccountName: "{{ .Release.Name }}-test-runner"
  restartPolicy: Never
  containers:
    - name: test-enr-job-completion
      image: bitnami/kubectl:latest
      command:
        - /bin/sh
        - -ec
        - |
          echo "INFO: Checking ENR generation job status (default generation)..."
          JOB_NAME="{{ template "charon.fullname" . }}-enr-job"
          # Wait for job to complete or fail, fail script if job fails
          if ! kubectl wait --for=condition=complete job/$JOB_NAME --timeout=120s -n {{ .Release.Namespace }}; then
            echo "ERROR: Job $JOB_NAME did not complete successfully within timeout."
            kubectl logs job/$JOB_NAME -n {{ .Release.Namespace }} --tail=50
            exit 1
          fi
          echo "INFO: ENR generation job $JOB_NAME completed successfully."

    - name: test-enr-secret-existence
      image: bitnami/kubectl:latest
      command:
        - /bin/sh
        - -ec
        - |
          echo "INFO: Checking ENR secret existence and content (default generation)..."
          # This test ALWAYS checks for the default generated secret name
          SECRET_NAME="{{ template "charon.enrSecretName" . }}"

          if ! kubectl get secret $SECRET_NAME -n {{ .Release.Namespace }} >/dev/null 2>&1; then
            echo "ERROR: Secret $SECRET_NAME not found"
            exit 1
          fi
          PRIVATE_KEY=$(kubectl get secret $SECRET_NAME -n {{ .Release.Namespace }} -o jsonpath='{.data.private-key}' | base64 --decode)
          PUBLIC_ENR=$(kubectl get secret $SECRET_NAME -n {{ .Release.Namespace }} -o jsonpath='{.data.public-enr}' | base64 --decode)

          if [ -z "$PRIVATE_KEY" ]; then
            echo "ERROR: Private key not found or empty in secret $SECRET_NAME"
            exit 1
          fi

          if [ -z "$PUBLIC_ENR" ]; then
            echo "ERROR: Public ENR not found or empty in secret $SECRET_NAME"
            exit 1
          fi

          echo "INFO: ENR secret $SECRET_NAME contains valid data."
          echo "INFO: Default ENR generation test passed."
{{- end }}
