
Charon Cluster
===========
{{ template "chart.deprecationWarning" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

# How to use this chart

A distributed validator cluster is composed of the following containers:

- Single execution layer client
- Single consensus layer client
- Number of Distributed Validator clients [This chart]
- Number of Validator clients
- Prometheus, Grafana and Jaeger clients for monitoring this cluster.

![Distributed Validator Cluster](https://github.com/ObolNetwork/charon-distributed-validator-cluster/blob/main/DVCluster.png?raw=true)

## Prerequisites
You have the following charon artifacts created as k8s secrets per each charon node:
- `<cluster-name>-<node-index>-validators` i.e `charon-cluster-0-validators`
- `<cluster-name>-<node-index>-charon-enr-private-key` i.e `charon-cluster-0-charon-enr-private-key`
The cluster lock is a single secret for the whole cluster:
- `cluster-lock`

e.g. with node0:
```console
kubectl create secret generic charon-enr-private-key --from-file=cluster/node0/charon-enr-private-key
kubectl create secret generic cluster-lock --from-file=node0/cluster-lock.json
kubectl create secret generic validator-keys --from-file=keystore-0.json=cluster/node0/validator_keys/keystore-0.json --from-file=keystore-0.txt=cluster/node0/validator_keys/keystore-0.txt

List of secrets for a cluster `charon-cluster` with 4 nodes are:
```console
charon-cluster-0-charon-enr-private-key
charon-cluster-0-validators
charon-cluster-1-charon-enr-private-key
charon-cluster-1-validators
charon-cluster-2-charon-enr-private-key
charon-cluster-2-validators
charon-cluster-3-charon-enr-private-key
charon-cluster-3-validators
cluster-lock
```

## Add Obol's Helm Charts Repo

```sh
helm repo add obol https://obolnetwork.github.io/helm-charts
helm repo update
```
_See [helm repo](https://helm.sh/docs/helm/helm_repo/) for command documentation._

## Install the chart
Install a charon cluster `charon-cluster` with 4 nodes:
```sh
helm upgrade --install charon-cluster obol/charon-cluster \
  --set='clusterSize=4' \
  --set='config.beaconNodeEndpoints=<BEACON_NODES_ENDPOINTS>' \
  --create-namespace \
  --namespace $CHARON_NODE_NAMESPACE
```

## Connect the validator client
- Update each validator client to connect to charon node API endpoint instead of the beacon node endpoint `--beacon-node-api-endpoint="http://CHARON_NODE_SERVICE_NAME:3600"`
- Mount each of the `<cluster-name>-<node-index>-validators` k8s secrets to the validator client validators folder.

Example of a single teku deployment that pairs with the charon-cluster node `charon-cluster-0`
```yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: charon-cluster-0-teku
  name: charon-cluster-0-teku
  namespace: charon-cluster
spec:
  replicas: 1
  selector:
    matchLabels:
      app: charon-cluster-0-teku
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: charon-cluster-0-teku
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      initContainers:
        - name: init-chown
          image: busybox
          securityContext:
            runAsUser: 0
          command:
            - sh
            - -ac
            - >
              rm -rf /data/teku/validator_keys 2>/dev/null || true;
              mkdir -p /data/teku/validator_keys;
              cp /validator_keys/* /data/teku/validator_keys;
              chown -R 1000:1000 /data/teku;
          volumeMounts:
            - name: data
              mountPath: /data/teku
            - name: validators
              mountPath: "/validator_keys"
      containers:
        - name: charon-cluster-0-teku
          image: consensys/teku:latest
          command:
            - sh
            - -ace
            - |
              /opt/teku/bin/teku vc \
              --network=auto \
              --log-destination=console \
              --data-base-path=/data/teku \
              --metrics-enabled=true \
              --metrics-host-allowlist="*" \
              --metrics-interface="0.0.0.0" \
              --metrics-port="8008" \
              --validator-keys="/data/teku/validator_keys:/data/teku/validator_keys" \
              --validators-graffiti="Obol Distributed Validator" \
              --beacon-node-api-endpoint="http://charon-cluster-0.charon-cluster.charon-cluster.svc.cluster.local:3600" \
              --validators-proposer-default-fee-recipient="0x9FD17880D4F5aE131D62CE6b48dF7ba7D426a410";
          volumeMounts:
            - name: data
              mountPath: /data/teku
      volumes:
        - name: validators
          projected:
            sources:
            - secret:
                name: charon-cluster-validators 
        - name: data
          emptyDir: {}
```

## Uninstall the Chart
To uninstall and delete the `charon-cluster`:
```sh
helm uninstall charon-cluster
```
The command removes all the Kubernetes components associated with the chart and deletes the release.
